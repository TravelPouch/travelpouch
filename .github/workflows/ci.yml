name: CI - Test Runner

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  unit_tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Enable KVM permissions
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Decode secrets for Google services
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json

      - name: Set execute permissions for gradlew
        run: chmod +x ./gradlew

      - name: Run Unit Tests
        run: ./gradlew check --parallel --build-cache

      - name: Save Unit Test Results
        if: success()  # Only save if the tests were successful
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: |
            app/build/test-results/
            app/build/reports/
            app/build/outputs/

  ui_tests:
    name: Run UI Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Enable KVM permissions
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Decode secrets for Google services
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json

      # Cache the Emulator, if the cache does not hit, create the emulator
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-34

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: echo "Generated AVD snapshot for caching."
          
      - name: Cache firebase emulators
        uses: actions/cache@v4
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-emulators-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-firebase-emulators-

      - name : Install Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash

      - name: Set execute permissions for gradlew
        run: chmod +x ./gradlew

      # This step runs gradle commands to build the application
      - name: Assemble
        run: |
          # To run the CI with debug information, add --info
          ./gradlew assemble lint --parallel --build-cache

      # Run connected tests on the emulator
      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: firebase emulators:exec "./gradlew connectedCheck --parallel --build-cache"

      - name: Save UI Test Results
        if: success()  # Only save if the tests were successful
        uses: actions/upload-artifact@v3
        with:
          name: ui-test-results
          path: |
            app/build/androidTests/connected/
            app/build/reports/
            app/build/outputs/
            app/build/test-results/

  coverage:
    name: Generate and Upload Coverage Report
    runs-on: ubuntu-latest
    needs: [unit_tests, ui_tests]  # Ensure both test jobs complete first

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Download Unit Test Results
        uses: actions/download-artifact@v3
        with:
          name: unit-test-results
          path: unit-test-results/

      - name: Download UI Test Results
        uses: actions/download-artifact@v3
        with:
          name: ui-test-results
          path: ui-test-results/

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"
          java-package: jdk

      - name: Decode secrets for Google services
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
        run: |
          echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
      - name: Copy downloaded unit test results to build folder
        run: |
          echo "Listing downloaded unit-test-results:"
          ls -R unit-test-results/
          
          echo "Copying unit-test-results to ./app/build..."
          cp -r unit-test-results/. ./app/build/ || true  # Overwrite if needed, create directories as necessary

      - name: Copy downloaded UI test results to build folder
        run: |
          echo "Listing downloaded ui-test-results:"
          ls -R ui-test-results/
          
          echo "Copying ui-test-results to ./app/build..."
          cp -r ui-test-results/. ./app/build/ || true  # Overwrite if needed, create directories as necessary

      - name: List contents of ./app/build folder after copying
        run: |
          echo "Listing contents of ./app/build after copying:"
          ls -R ./app/build/  # Ensure everything is copied correctly


      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3


      - name: Generate Jacoco Coverage Report
        run: ./gradlew jacocoTestReport

      - name: Upload Coverage to SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --parallel --build-cache
